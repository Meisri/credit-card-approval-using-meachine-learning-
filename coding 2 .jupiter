# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load the dataset
file_path = "crx.csv"  # Replace with your dataset path
try:
    data = pd.read_csv(file_path, header=None, na_values="?")
    print("Dataset loaded successfully!")
except FileNotFoundError:
    print(f"File {file_path} not found. Please check the file path.")
    exit()

# Data Preprocessing
print("Preprocessing the dataset...")
# Handle missing values
data.fillna(data.median(numeric_only=True), inplace=True)
data.fillna("Unknown", inplace=True)

# Separate features and target
X = data.iloc[:, :-1]
y = data.iloc[:, -1]

# Encode categorical variables
label_encoders = {}
for col in X.select_dtypes(include=["object"]).columns:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col].astype(str))
    label_encoders[col] = le

# Encode the target variable
target_encoder = LabelEncoder()
y = target_encoder.fit_transform(y)

# Standardize numeric features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
print("Training the model...")
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
print("Evaluating the model...")
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")
print("\nClassification Report:\n")
print(classification_report(y_test, y_pred))

# Predict for new data (optional)
# Ensure the new data has the same number of features as the training data
new_data = np.array([1, 22, 50000, 2, 1, 0] + [0] * (X.shape[1] - 6)).reshape(1, -1)  # Replace 0 with appropriate default values
new_data_scaled = scaler.transform(new_data)
prediction = model.predict(new_data_scaled)
predicted_class = target_encoder.inverse_transform(prediction)
print(f"Prediction for new data: {predicted_class[0]}")


